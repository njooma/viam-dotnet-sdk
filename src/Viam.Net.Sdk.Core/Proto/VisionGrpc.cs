// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/api/service/vision/v1/vision.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto.Api.Service.Vision.V1 {
  /// <summary>
  /// VisionService declares the gRPC contract for a vision service
  /// </summary>
  public static partial class VisionService
  {
    static readonly string __ServiceName = "proto.api.service.vision.v1.VisionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest> __Marshaller_proto_api_service_vision_v1_GetDetectorNamesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse> __Marshaller_proto_api_service_vision_v1_GetDetectorNamesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.AddDetectorRequest> __Marshaller_proto_api_service_vision_v1_AddDetectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.AddDetectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.AddDetectorResponse> __Marshaller_proto_api_service_vision_v1_AddDetectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.AddDetectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetDetectionsRequest> __Marshaller_proto_api_service_vision_v1_GetDetectionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetDetectionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetDetectionsResponse> __Marshaller_proto_api_service_vision_v1_GetDetectionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetDetectionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest> __Marshaller_proto_api_service_vision_v1_GetSegmenterNamesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse> __Marshaller_proto_api_service_vision_v1_GetSegmenterNamesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest> __Marshaller_proto_api_service_vision_v1_GetSegmenterParametersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse> __Marshaller_proto_api_service_vision_v1_GetSegmenterParametersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest> __Marshaller_proto_api_service_vision_v1_GetObjectPointCloudsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse> __Marshaller_proto_api_service_vision_v1_GetObjectPointCloudsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest, global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse> __Method_GetDetectorNames = new grpc::Method<global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest, global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetectorNames",
        __Marshaller_proto_api_service_vision_v1_GetDetectorNamesRequest,
        __Marshaller_proto_api_service_vision_v1_GetDetectorNamesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.AddDetectorRequest, global::Proto.Api.Service.Vision.V1.AddDetectorResponse> __Method_AddDetector = new grpc::Method<global::Proto.Api.Service.Vision.V1.AddDetectorRequest, global::Proto.Api.Service.Vision.V1.AddDetectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddDetector",
        __Marshaller_proto_api_service_vision_v1_AddDetectorRequest,
        __Marshaller_proto_api_service_vision_v1_AddDetectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.GetDetectionsRequest, global::Proto.Api.Service.Vision.V1.GetDetectionsResponse> __Method_GetDetections = new grpc::Method<global::Proto.Api.Service.Vision.V1.GetDetectionsRequest, global::Proto.Api.Service.Vision.V1.GetDetectionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetections",
        __Marshaller_proto_api_service_vision_v1_GetDetectionsRequest,
        __Marshaller_proto_api_service_vision_v1_GetDetectionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse> __Method_GetSegmenterNames = new grpc::Method<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSegmenterNames",
        __Marshaller_proto_api_service_vision_v1_GetSegmenterNamesRequest,
        __Marshaller_proto_api_service_vision_v1_GetSegmenterNamesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse> __Method_GetSegmenterParameters = new grpc::Method<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSegmenterParameters",
        __Marshaller_proto_api_service_vision_v1_GetSegmenterParametersRequest,
        __Marshaller_proto_api_service_vision_v1_GetSegmenterParametersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest, global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse> __Method_GetObjectPointClouds = new grpc::Method<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest, global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetObjectPointClouds",
        __Marshaller_proto_api_service_vision_v1_GetObjectPointCloudsRequest,
        __Marshaller_proto_api_service_vision_v1_GetObjectPointCloudsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.Api.Service.Vision.V1.VisionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VisionService</summary>
    [grpc::BindServiceMethod(typeof(VisionService), "BindService")]
    public abstract partial class VisionServiceBase
    {
      /// <summary>
      /// GetDetectorNames returns the list of detectors in the registry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse> GetDetectorNames(global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AddDetector adds a new detector to the registry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.AddDetectorResponse> AddDetector(global::Proto.Api.Service.Vision.V1.AddDetectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDetections will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.GetDetectionsResponse> GetDetections(global::Proto.Api.Service.Vision.V1.GetDetectionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetSegmenterNames returns the list of segmenters in the registry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse> GetSegmenterNames(global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse> GetSegmenterParameters(global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointClouds(global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VisionService</summary>
    public partial class VisionServiceClient : grpc::ClientBase<VisionServiceClient>
    {
      /// <summary>Creates a new client for VisionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VisionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VisionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VisionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VisionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VisionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetDetectorNames returns the list of detectors in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse GetDetectorNames(global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectorNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetectorNames returns the list of detectors in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse GetDetectorNames(global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetectorNames, null, options, request);
      }
      /// <summary>
      /// GetDetectorNames returns the list of detectors in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse> GetDetectorNamesAsync(global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectorNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetectorNames returns the list of detectors in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse> GetDetectorNamesAsync(global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetectorNames, null, options, request);
      }
      /// <summary>
      /// AddDetector adds a new detector to the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.AddDetectorResponse AddDetector(global::Proto.Api.Service.Vision.V1.AddDetectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDetector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddDetector adds a new detector to the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.AddDetectorResponse AddDetector(global::Proto.Api.Service.Vision.V1.AddDetectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddDetector, null, options, request);
      }
      /// <summary>
      /// AddDetector adds a new detector to the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.AddDetectorResponse> AddDetectorAsync(global::Proto.Api.Service.Vision.V1.AddDetectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDetectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddDetector adds a new detector to the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.AddDetectorResponse> AddDetectorAsync(global::Proto.Api.Service.Vision.V1.AddDetectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddDetector, null, options, request);
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetDetectionsResponse GetDetections(global::Proto.Api.Service.Vision.V1.GetDetectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetections(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetDetectionsResponse GetDetections(global::Proto.Api.Service.Vision.V1.GetDetectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetections, null, options, request);
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetDetectionsResponse> GetDetectionsAsync(global::Proto.Api.Service.Vision.V1.GetDetectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetectionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDetections will return a list of detections in the next image given a camera and a detector
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetDetectionsResponse> GetDetectionsAsync(global::Proto.Api.Service.Vision.V1.GetDetectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetections, null, options, request);
      }
      /// <summary>
      /// GetSegmenterNames returns the list of segmenters in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse GetSegmenterNames(global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSegmenterNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSegmenterNames returns the list of segmenters in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse GetSegmenterNames(global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSegmenterNames, null, options, request);
      }
      /// <summary>
      /// GetSegmenterNames returns the list of segmenters in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse> GetSegmenterNamesAsync(global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSegmenterNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSegmenterNames returns the list of segmenters in the registry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse> GetSegmenterNamesAsync(global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSegmenterNames, null, options, request);
      }
      /// <summary>
      /// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse GetSegmenterParameters(global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSegmenterParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse GetSegmenterParameters(global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSegmenterParameters, null, options, request);
      }
      /// <summary>
      /// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse> GetSegmenterParametersAsync(global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSegmenterParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSegmenterParameters returns the parameter fields needed for the given segmenter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse> GetSegmenterParametersAsync(global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSegmenterParameters, null, options, request);
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse GetObjectPointClouds(global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectPointClouds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse GetObjectPointClouds(global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectPointClouds, null, options, request);
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointCloudsAsync(global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetObjectPointCloudsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
      /// as well as the 3-vector center of each of the found objects.
      /// A specific MIME type can be requested but may not necessarily be the same one returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse> GetObjectPointCloudsAsync(global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectPointClouds, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VisionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VisionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(VisionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDetectorNames, serviceImpl.GetDetectorNames)
          .AddMethod(__Method_AddDetector, serviceImpl.AddDetector)
          .AddMethod(__Method_GetDetections, serviceImpl.GetDetections)
          .AddMethod(__Method_GetSegmenterNames, serviceImpl.GetSegmenterNames)
          .AddMethod(__Method_GetSegmenterParameters, serviceImpl.GetSegmenterParameters)
          .AddMethod(__Method_GetObjectPointClouds, serviceImpl.GetObjectPointClouds).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VisionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDetectorNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.GetDetectorNamesRequest, global::Proto.Api.Service.Vision.V1.GetDetectorNamesResponse>(serviceImpl.GetDetectorNames));
      serviceBinder.AddMethod(__Method_AddDetector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.AddDetectorRequest, global::Proto.Api.Service.Vision.V1.AddDetectorResponse>(serviceImpl.AddDetector));
      serviceBinder.AddMethod(__Method_GetDetections, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.GetDetectionsRequest, global::Proto.Api.Service.Vision.V1.GetDetectionsResponse>(serviceImpl.GetDetections));
      serviceBinder.AddMethod(__Method_GetSegmenterNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.GetSegmenterNamesRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterNamesResponse>(serviceImpl.GetSegmenterNames));
      serviceBinder.AddMethod(__Method_GetSegmenterParameters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.GetSegmenterParametersRequest, global::Proto.Api.Service.Vision.V1.GetSegmenterParametersResponse>(serviceImpl.GetSegmenterParameters));
      serviceBinder.AddMethod(__Method_GetObjectPointClouds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsRequest, global::Proto.Api.Service.Vision.V1.GetObjectPointCloudsResponse>(serviceImpl.GetObjectPointClouds));
    }

  }
}
#endregion
